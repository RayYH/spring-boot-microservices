---
version: '3.9'

services:
  mongo:
    container_name: mongo
    image: mongo:4.4
    env_file:
      - .env
    ports:
      - "27017:27017"
    expose:
      - "27017"
    volumes:
      - ./.data/mongo:/data/db
    restart: unless-stopped

  postgres-order:
    container_name: postgres-order
    image: postgres
    env_file:
      - .env
    environment:
      POSTGRES_DB: order_service
    volumes:
      - ./.data/postgres-order:/data/postgres
    expose:
      - "5431"
    ports:
      - "5431:5431"
    command: -p 5431
    restart: unless-stopped

  postgres-inventory:
    container_name: postgres-inventory
    image: postgres
    env_file:
      - .env
    environment:
      POSTGRES_DB: inventory_service
    volumes:
      - ./.data/postgres-inventory:/data/postgres
    ports:
      - "5432:5432"
    restart: unless-stopped

  mysql-keycloak:
    container_name: mysql-keycloak
    image: mysql:8
    env_file:
      - .env
    volumes:
      - ./.data/mysql-keycloak:/var/lib/mysql
    environment:
      MYSQL_DATABASE: keycloak

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:18.0.0
    command: [ "start-dev", "--import-realm" ]
    env_file:
      - .env
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "8181:8080"
    volumes:
      - ./.conf/realms/:/opt/keycloak/data/import/
    depends_on:
      - mysql-keycloak

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.3.2
    container_name: broker
    restart: always
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  prometheus:
    image: prom/prometheus:v2.37.1
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./.conf/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana-oss:8.5.2
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    links:
      - prometheus:prometheus
    volumes:
      - ./.data/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password

  discovery-server:
    image: rayyounghong/sbms-discovery-server:latest
    build:
      context: .
      dockerfile: packaging/discover-server.Dockerfile
    container_name: discovery-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin

  api-gateway:
    image: rayyounghong/sbms-api-gateway:latest
    build:
      context: .
      dockerfile: packaging/api-gateway.Dockerfile
    container_name: api-gateway
    restart: always
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
      - discovery-server
      - keycloak

  product-service:
    image: rayyounghong/sbms-product-service:latest
    build:
      context: .
      dockerfile: packaging/product-service.Dockerfile
    container_name: product-service
    restart: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo
      - discovery-server
      - api-gateway

  order-service:
    image: rayyounghong/sbms-order-service:latest
    build:
      context: .
      dockerfile: packaging/order-service.Dockerfile
    container_name: order-service
    restart: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5431/order_service
    depends_on:
      - postgres-order
      - broker
      - zipkin
      - discovery-server
      - api-gateway

  inventory-service:
    image: rayyounghong/sbms-inventory-service:latest
    build:
      context: .
      dockerfile: packaging/inventory-service.Dockerfile
    container_name: inventory-service
    restart: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5432/inventory_service
    depends_on:
      - postgres-inventory
      - discovery-server
      - api-gateway

  notification-service:
    image: rayyounghong/sbms-notification-service:latest
    build:
      context: .
      dockerfile: packaging/notification-service.Dockerfile
    container_name: notification-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
      - broker
      - discovery-server
      - api-gateway